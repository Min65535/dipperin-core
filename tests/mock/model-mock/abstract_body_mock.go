// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/model (interfaces: AbstractBody)

// Package model_mock is a generated GoMock package.
package model_mock

import (
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAbstractBody is a mock of AbstractBody interface
type MockAbstractBody struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractBodyMockRecorder
}

// MockAbstractBodyMockRecorder is the mock recorder for MockAbstractBody
type MockAbstractBodyMockRecorder struct {
	mock *MockAbstractBody
}

// NewMockAbstractBody creates a new mock instance
func NewMockAbstractBody(ctrl *gomock.Controller) *MockAbstractBody {
	mock := &MockAbstractBody{ctrl: ctrl}
	mock.recorder = &MockAbstractBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbstractBody) EXPECT() *MockAbstractBodyMockRecorder {
	return m.recorder
}

// EncodeRlpToBytes mocks base method
func (m *MockAbstractBody) EncodeRlpToBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeRlpToBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeRlpToBytes indicates an expected call of EncodeRlpToBytes
func (mr *MockAbstractBodyMockRecorder) EncodeRlpToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeRlpToBytes", reflect.TypeOf((*MockAbstractBody)(nil).EncodeRlpToBytes))
}

// GetInterLinks mocks base method
func (m *MockAbstractBody) GetInterLinks() model.InterLink {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterLinks")
	ret0, _ := ret[0].(model.InterLink)
	return ret0
}

// GetInterLinks indicates an expected call of GetInterLinks
func (mr *MockAbstractBodyMockRecorder) GetInterLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterLinks", reflect.TypeOf((*MockAbstractBody)(nil).GetInterLinks))
}

// GetTxByIndex mocks base method
func (m *MockAbstractBody) GetTxByIndex(arg0 int) model.AbstractTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxByIndex", arg0)
	ret0, _ := ret[0].(model.AbstractTransaction)
	return ret0
}

// GetTxByIndex indicates an expected call of GetTxByIndex
func (mr *MockAbstractBodyMockRecorder) GetTxByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByIndex", reflect.TypeOf((*MockAbstractBody)(nil).GetTxByIndex), arg0)
}

// GetTxsSize mocks base method
func (m *MockAbstractBody) GetTxsSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxsSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTxsSize indicates an expected call of GetTxsSize
func (mr *MockAbstractBodyMockRecorder) GetTxsSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxsSize", reflect.TypeOf((*MockAbstractBody)(nil).GetTxsSize))
}
