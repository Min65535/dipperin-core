// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/chaincommunication (interfaces: NodeConf)

// Package chaincommunication is a generated GoMock package.
package chaincommunication

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeConf is a mock of NodeConf interface
type MockNodeConf struct {
	ctrl     *gomock.Controller
	recorder *MockNodeConfMockRecorder
}

// MockNodeConfMockRecorder is the mock recorder for MockNodeConf
type MockNodeConfMockRecorder struct {
	mock *MockNodeConf
}

// NewMockNodeConf creates a new mock instance
func NewMockNodeConf(ctrl *gomock.Controller) *MockNodeConf {
	mock := &MockNodeConf{ctrl: ctrl}
	mock.recorder = &MockNodeConfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeConf) EXPECT() *MockNodeConfMockRecorder {
	return m.recorder
}

// GetNodeName mocks base method
func (m *MockNodeConf) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName
func (mr *MockNodeConfMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockNodeConf)(nil).GetNodeName))
}

// GetNodeType mocks base method
func (m *MockNodeConf) GetNodeType() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeType")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNodeType indicates an expected call of GetNodeType
func (mr *MockNodeConfMockRecorder) GetNodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeType", reflect.TypeOf((*MockNodeConf)(nil).GetNodeType))
}
