// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/chaincommunication (interfaces: VerifiersReader)

// Package chaincommunication is a generated GoMock package.
package chaincommunication

import (
	common "github.com/dipperin/dipperin-core/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVerifiersReader is a mock of VerifiersReader interface
type MockVerifiersReader struct {
	ctrl     *gomock.Controller
	recorder *MockVerifiersReaderMockRecorder
}

// MockVerifiersReaderMockRecorder is the mock recorder for MockVerifiersReader
type MockVerifiersReaderMockRecorder struct {
	mock *MockVerifiersReader
}

// NewMockVerifiersReader creates a new mock instance
func NewMockVerifiersReader(ctrl *gomock.Controller) *MockVerifiersReader {
	mock := &MockVerifiersReader{ctrl: ctrl}
	mock.recorder = &MockVerifiersReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifiersReader) EXPECT() *MockVerifiersReaderMockRecorder {
	return m.recorder
}

// CurrentVerifiers mocks base method
func (m *MockVerifiersReader) CurrentVerifiers() []common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentVerifiers")
	ret0, _ := ret[0].([]common.Address)
	return ret0
}

// CurrentVerifiers indicates an expected call of CurrentVerifiers
func (mr *MockVerifiersReaderMockRecorder) CurrentVerifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentVerifiers", reflect.TypeOf((*MockVerifiersReader)(nil).CurrentVerifiers))
}

// NextVerifiers mocks base method
func (m *MockVerifiersReader) NextVerifiers() []common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextVerifiers")
	ret0, _ := ret[0].([]common.Address)
	return ret0
}

// NextVerifiers indicates an expected call of NextVerifiers
func (mr *MockVerifiersReaderMockRecorder) NextVerifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextVerifiers", reflect.TypeOf((*MockVerifiersReader)(nil).NextVerifiers))
}

// ShouldChangeVerifier mocks base method
func (m *MockVerifiersReader) ShouldChangeVerifier() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldChangeVerifier")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldChangeVerifier indicates an expected call of ShouldChangeVerifier
func (mr *MockVerifiersReaderMockRecorder) ShouldChangeVerifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldChangeVerifier", reflect.TypeOf((*MockVerifiersReader)(nil).ShouldChangeVerifier))
}
